1.

#include <stdio.h>

int main()
{
    int n;
    printf("Enter the number of elements:");
    scanf("%d",&n);
    printf("Enter the array elements :");
    int a[n];                    
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++)         //Sorting Array
    {
        int temp;
        for(int j=i+1; j<n ;j++)
        {
            if(a[i]<a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
    printf("The second smallest element is %d",a[n-2]);   //Accessing the smallest element
    printf("\n");
    printf("The second largest element is %d",a[1]);      //Accessing the largest element
    return 0;
}

2.

#include <stdio.h>

void calculatePrefixSum(int arr[], int prefixSum[], int n) {
    prefixSum[0] = arr[0];

    for (int i = 1; i < n; i++) {
        prefixSum[i] = prefixSum[i - 1] + arr[i];
    }
}

int main() {
    int n;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int prefixSum[n];
    calculatePrefixSum(arr, prefixSum, n);

    printf("Prefix sum array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", prefixSum[i]);
    }
    printf("\n");

    return 0;
}

3.

// Write a program to read ‘n’ integers from a disc file that must contain
// some duplicate values and store them into an array. Perform the following operations on the
// array.
// a) Find out the total number of duplicate elements.
// b) Find out the most repeating element in the array

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {

    // generate an array of random numbers 
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));
    int i; 
    srand(time(NULL)); 
    for (i = 0; i < n; i++) {
        arr[i] = rand() % 10;
    } 

    // print the array
    printf("Array: \n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    
    // find total no of duplicate elements and the most repeating element
    int *count = (int *)malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
        count[i] = 0;
    }
    for (i = 0; i < n; i++) {
        count[arr[i]]++;
    }
    int total = 0;
    for (i = 0; i < n; i++) {
        if (count[i] > 1) total++;
    }
    printf("Total number of duplicate elements: %d\n", total);
    printf("Most repeating element: %d\n", count[0]);
    return 0;
}

4.

// Write a function to rotate_right(p1, p2 ) right an array for first p2
// elements by 1 position using exchange(p, q) function that swaps/exchanges the numbers p &
// q. Parameter p1 be the starting address of the array and p2 be the number of elements to be
// rotated.
// Input:
// Enter an array A of size N (9): 11 22 33 44 55 66 77 88 99
// Call the function rotate_right(A, 5)
// Output:
// Before ROTATE: 11 22 33 44 55 66 77 88 99
// After ROTATE: 55 11 22 33 44 66 77 88 99

#include <stdio.h>
#include <stdlib.h>

void exchange(int *p, int *q) {
    int temp = *p;
    *p = *q;
    *q = temp;
}

void rotate_right(int *arr, int p2) {
    for (int i = 0; i < p2 / 2; i++) {
        exchange(&arr[i], &arr[p2 - 1 - i]);
    }
}

int main() {
    int N; 
    printf("Enter the size of the array: ");
    scanf("%d", &N);

    int *A = (int *)malloc(N * sizeof(int));
    printf("Enter an array of size %d: ", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &A[i]);
    }

    int p2;
    printf("Enter the number of elements to be rotated: ");
    scanf("%d", &p2);

    printf("Before ROTATE:");
    for (int i = 0; i < N; i++) {
        printf(" %d", A[i]);
    }
    printf("\n");

    rotate_right(A, p2);

    printf("After ROTATE:");
    for (int i = 0; i < N; i++) {
        printf(" %d", A[i]);
    }
    printf("\n");

    return 0;
}